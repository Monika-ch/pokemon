{"version":3,"sources":["serviceWorker.js","Components/Pokecard.js","Components/Pokedex.js","Components/DiscardCard.js","Components/CompletedSet.js","Components/CardDeck.js","Components/PokeModal.js","Components/ScoreList.js","Components/Pokegame.js","Components/Main.js","redux/pokemonFetch.js","redux/ActionTypes.js","PokemonCache.js","Components/Home.js","Components/FriendGame.js","Components/RandomGame.js","Components/GameRules.js","redux/pokemon.js","Route.js","redux/configureStore.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Pokecard","props","number","imgSrc","this","id","slice","name","type","exp","width","usedAs","className","onClick","src","alt","Component","Pokedex","pokemon","map","p","base_experience","isComputer","DiscardCard","hidePokemonDetails","hidden","CompletedSet","pokemonArray","dictionary","Map","Array","from","values","getOnePerType","CardDeck","onDeckClick","PokeModal","Fragment","Modal","isOpen","isModalOpen","ModalHeader","modalTitle","ModalBody","Card","modalContent","CardBody","onClickButton1","modalButton1","onClickButton2","modalButton2","ScoreList","typeWithCount","x","reduce","acc","e","set","get","playerName","count","getTypeCount","hand","cantAddCardorMakeMove","computerWonModal","humanWonModal","defaultState","discardedCard","computerHand","playerHand","completedSetPlayer","completedSetComputer","isRedirect","isPlayerTurn","selectedCard","computerLastMove","gameOver","modalState","onButtonClick1","onButtonClick2","Pokegame","canMakeMove","state","isPokemonLoading","resetState","initialize","getNRandomPokemon","maxCardInDeck","length","randIdx","Math","floor","random","randPokemon","splice","push","shouldRedirect","getCompletedSets","setState","checkWinner","setCompletedState","stateHand","currentCompletedSet","completedHandName","completedSets","deck","filterCompletedSet","playerTypeCount","i","filter","concat","newCompletedSetPlayer","newCompletedSetComputer","isAWinningHand","onNewGame","toHome","dismissModal","console","log","swapDiscardCard","swapCardFromHand","matchCard","removeMatched","completedSet","returnValue","notInCompletedSet","j","getHandSum","showRules","key","JSON","stringify","n","arr","result","len","taken","getRandom","idx","findIndex","card","newCard","ifWinningBySet","cardCoundNeededToCompleteSet","ifWinningByExp","exp1","exp2","discardCardAndSetState","handName","makeMove","newHand2","makeComputerMove","setTimeout","computerMovePrefix","filteredCards","shouldPickFromDeck","cardDiscarded","newHand","getCardFromDeck","logicOfComputerMove","tabIndex","onKeyUp","active","spinner","text","Prompt","when","message","to","Button","size","color","connect","pokemons","isLoading","Main","changeColor","defaultProps","mainPokemonData","addPokemon","payload","onError","error","onLoadingStarted","pokemonLoaded","convertModel","types","PokemonCache","maxPokemons","triggerDownload","getPokemonData","cache","url","fetch","toString","json","responseBody","styles","StyleSheet","create","fadeIn","animationName","mapDispatchToProps","dispatch","a","jsonDataFromServer","Home","document","getElementsByClassName","CircleType","dir","radius","css","bottom","process","height","outline","FriendGame","RandomGame","Pokemons","errMess","action","store","createStore","combineReducers","applyMiddleware","thunk","logger","Routes","path","component","GameRules","render","exact","App","basename","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"sJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mFC2BSC,G,wDAnCb,WAAYC,GAAQ,uCACZA,G,qDAGE,IANMC,EAMP,OACHC,EAAM,UATG,8DASH,QAPID,EAOwBE,KAAKH,MAAMI,KAPb,IAAM,YAAKH,GAASI,OAAO,GAAKJ,EAO1D,QACNK,EAAOH,KAAKH,MAAMM,KAClBC,EAAOJ,KAAKH,MAAMO,KAClBC,EAAML,KAAKH,MAAMQ,IACjBC,EAAQ,IAUZ,MAR0B,qBAAtBN,KAAKH,MAAMU,SACbR,EAAS,kBACTI,EAAO,UACPC,EAAO,KACPC,EAAM,KACNC,EAAQ,IAIR,yBACEE,UAAU,WACVC,QAAS,kBAAM,EAAKZ,MAAMY,QAAQ,EAAKZ,MAAMI,MAE7C,wBAAIO,UAAU,kBAAkBL,GAChC,yBAAKK,UAAU,kBACb,yBAAKE,IAAKX,EAAQY,IAAKX,KAAKH,MAAMM,KAAMG,MAAOA,KAEjD,yBAAKE,UAAU,iBAAf,SAAsCJ,GACtC,yBAAKI,UAAU,iBAAf,QAAqCH,Q,GA9BtBO,cCmBRC,E,uKAxBH,IAAD,OACP,OACE,yBAAKL,UAAU,WAGb,yBAAKA,UAAU,iBACZR,KAAKH,MAAMiB,QAAQC,KAAI,SAACC,GAAD,OACtB,kBAAC,EAAD,CACEf,GAAIe,EAAEf,GACNE,KAAMa,EAAEb,KACRC,KAAMY,EAAEZ,KACRC,IAAKW,EAAEC,gBACPR,QAAS,EAAKZ,MAAMY,QACpBF,OACE,EAAKV,MAAMqB,WAAa,mBAAqB,4B,GAfvCN,aCIDO,G,6KACT,IAHMrB,EAGP,OACHC,EAAM,UANG,8DAMH,QAJID,EAIwBE,KAAKH,MAAMI,KAJb,IAAM,YAAKH,GAASI,OAAO,GAAKJ,EAI1D,QACNQ,EAAQ,IACRc,GAAqB,EAQzB,OANuB,IAAnBpB,KAAKH,MAAMI,KACbF,EAAS,4BACTO,EAAQ,GACRc,GAAqB,GAIrB,yBACEZ,UAAU,cACVC,QAAS,kBAAM,EAAKZ,MAAMY,QAAQ,EAAKZ,MAAMI,MAE7C,yBAAKO,UAAU,mBAAmBa,OAAQD,GAA1C,SACSpB,KAAKH,MAAMO,MAEpB,yBAAKI,UAAU,mBAAmBa,OAAQD,GAA1C,QACQpB,KAAKH,MAAMoB,iBAEnB,yBAAKT,UAAU,qBACb,yBAAKE,IAAKX,EAAQY,IAAKX,KAAKH,MAAMM,KAAMG,MAAOA,KAEjD,wBAAIE,UAAU,oBAAoBa,OAAQD,GACvCpB,KAAKH,MAAMM,W,GA3BmBS,c,UCOpBU,E,uKAEjB,OACE,yBAAKd,UAAU,wBAVrB,SAAuBe,GACrB,IAAIC,EAAa,IAAIC,IACnBF,EAAaR,KAAI,SAACD,GAAD,MAAa,CAACA,EAAQV,KAAMU,OAE/C,OAAOY,MAAMC,KAAKH,EAAWI,UAOtBC,CAAc7B,KAAKH,MAAMiB,SAEvBC,KAAI,SAACD,GAAD,OACH,yBAAKN,UAAU,gBACb,yBAAKA,UAAU,wBACb,yBAAKP,GAAIa,EAAQb,IAAKa,EAAQV,MADhC,IAC4C,uC,GAThBQ,aCXrBkB,G,6KAEjB,OACE,6BACE,yBAAKtB,UAAU,WAAWC,QAAST,KAAKH,MAAMkC,aAC5C,yBAAKvB,UAAU,kBACb,yBAAKE,IAAI,eAAeJ,MAAM,MAAMK,IAAI,cAE1C,wBAAIH,UAAU,kBAAd,qB,GAR4BI,c,6CCCjBoB,G,6KAEjB,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKzB,UAAU,SACb,kBAAC0B,EAAA,EAAD,CAAOC,OAAQnC,KAAKH,MAAMuC,YAAa5B,UAAU,gBAC/C,kBAAC6B,EAAA,EAAD,CAAa7B,UAAU,uCACrB,4BAAKR,KAAKH,MAAMyC,aAElB,kBAACC,EAAA,EAAD,CAAW/B,UAAU,cACnB,kBAACgC,EAAA,EAAD,CAAMhC,UAAU,QACd,4BAAKR,KAAKH,MAAM4C,cAChB,kBAACC,EAAA,EAAD,CAAUlC,UAAU,aAClB,6BACE,4BACEA,UAAU,UACVJ,KAAK,SACLK,QAAST,KAAKH,MAAM8C,gBAEnB3C,KAAKH,MAAM+C,cAEd,4BACEpC,UAAU,UACVJ,KAAK,SACLK,QAAST,KAAKH,MAAMgD,gBAEnB7C,KAAKH,MAAMiD,yB,GA1BKlC,cCiCxBmC,G,6KAhCX,IAAMC,EAAgBtB,MAAMC,KAC1B3B,KAAKH,MAAMiB,QACRC,KAAI,SAACkC,GAAD,OAAOA,EAAE7C,QACb8C,QAAO,SAACC,EAAKC,GAAN,OAAYD,EAAIE,IAAID,GAAID,EAAIG,IAAIF,IAAM,GAAK,KAAI,IAAI3B,MAE3D8B,EAAa,MAIjB,OAHIvD,KAAKH,MAAMqB,aACbqC,EAAa,YAGb,6BACE,wBAAI/C,UAAU,mBAAmB+C,GACjC,yBAAK/C,UAAU,SACb,uCACU,0BAAMA,UAAU,cAAcR,KAAKH,MAAMQ,OAGrD,yBAAKG,UAAU,qBACb,4BACGwC,EAAcjC,KAAI,mCAAEX,EAAF,KAAQoD,EAAR,YACjB,yBAAKhD,UAAU,kBACb,0BAAMA,UAAU,SAASgD,EAAzB,KACA,0BAAMhD,UAAU,QAAQJ,EAAxB,oB,GAxBQQ,c,kDCmCxB,SAAS6C,EAAaC,GASpB,OALsBhC,MAAMC,KAC1B+B,EACG3C,KAAI,SAACkC,GAAD,OAAOA,EAAE7C,QACb8C,QAAO,SAACC,EAAKC,GAAN,OAAYD,EAAIE,IAAID,GAAID,EAAIG,IAAIF,IAAM,GAAK,KAAI,IAAI3B,MAKjE,IAOMkC,EAAwB,CAC5BvB,aAAa,EACbE,WAAY,iBACZG,aAAc,GACdG,aAAc,OACdE,aAAc,UAGVc,EAAmB,CACvBxB,aAAa,EACbE,WAAY,eACZG,aAAc,sCACdG,aAAc,WACdE,aAAc,QAGVe,EAAgB,CACpBzB,aAAa,EACbE,WAAY,eACZG,aAAc,+BACdG,aAAc,WACdE,aAAc,QAGVgB,EAAe,CACnBC,cAAe,CAAE9D,IAAK,EAAGE,KAAM,GAAIC,KAAM,GAAIC,IAAK,IAClD2D,aAAc,GACdC,WAAY,GACZC,mBAAoB,GACpBC,qBAAsB,GACtBC,YAAY,EACZC,cAAc,EACdC,aAAc,KACdC,iBAAkB,GAClBC,UAAU,EACVC,WAAY,CACVrC,aAAa,EACbE,WAAY,GACZG,aAAc,GACdG,aAAc,GACdE,aAAc,GACd4B,eAAgB,KAChBC,eAAgB,OAOdC,E,kDAKJ,WAAY/E,GAAQ,IAAD,8BACjB,cAAMA,IAMRgF,YAAc,kBAAM,EAAKC,MAAMT,eAAiB,EAAKxE,MAAMkF,kBAPxC,EASnBC,WAAa,WAOX,IAPoC,IAAxBC,EAAuB,wDAC/BjB,EAAe,GAKfC,EAAU,YAAO,EAAKiB,kBAAkBC,KACrCnB,EAAaoB,OAASnB,EAAWmB,QAAQ,CAC9C,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWvB,EAAWmB,QAChDK,EAAcxB,EAAWyB,OAAOL,EAAS,GAAG,GAChDrB,EAAa2B,KAAKF,GAGpB,IAAIG,GAAkB5B,IAAiBA,EAAaoB,OAMhDH,GACF,EAAKH,MAAQhB,EACb,EAAKgB,MAAMd,aAAeA,EAC1B,EAAKc,MAAMb,WAAaA,EACxB,EAAKa,MAAMZ,mBAAqB,EAAK2B,iBACnC,EAAKf,MAAMb,YAEb,EAAKa,MAAMX,qBAAuB,EAAK0B,iBACrC,EAAKf,MAAMd,cAEb,EAAKc,MAAMV,WAAawB,EACpBA,IACF,EAAKd,MAAMN,UAAW,KAGxB,EAAKsB,SAAShC,GACd,EAAKgC,SACH,CAAE7B,WAAYA,EAAYD,aAAcA,IACxC,kBAAM,EAAK+B,YAAY,EAAKjB,MAAMb,WAAY,EAAKa,MAAMd,iBAE3D,EAAK8B,SAAS,CAAE1B,WAAYwB,IACxBA,GACF,EAAKE,SAAS,CAAEtB,UAAU,MAlDb,EA6EnBwB,kBAAoB,SAACC,EAAWC,EAAqBC,GACnD,IAAIC,EAAgB,EAAKP,iBAAiBI,EAAWC,GAErD,OADA,EAAKJ,SAAL,eAAiBK,EAAoBC,IAC9BA,GAhFU,EAmFnBP,iBAAmB,SAACI,GAIlB,IAJ2D,IAA9BC,EAA6B,uDAAP,GAC/CG,EAAO,EAAKC,mBAAmBL,EAAWC,GAC1CK,EAAkB9C,EAAa4C,GAC/BD,EAAgB,GAHsC,WAIjDI,GAJiD,kBAKpCD,EAAgBC,GALoB,GAKnDpG,EALmD,WA/KzB,GAsL7BgG,EAAcT,KAAd,MAAAS,EAAa,YACRC,EACAI,QAAO,SAACzF,GAAD,OAAOA,EAAEZ,OAASA,KACzBF,MAAM,EAzLkB,MAmLxBsG,EAAI,EAAGA,EAAID,EAAgBnB,OAAQoB,IAAM,EAAzCA,GAUT,OAAON,EAAoBQ,OAAON,IAjGjB,EAoGnBL,YAAc,SAAC9B,EAAYD,GACzB,IAAI2C,EAAwB,EAAKX,kBAC/B/B,EACA,EAAKa,MAAMZ,mBACX,sBAGE0C,EAA0B,EAAKZ,kBACjChC,EACA,EAAKc,MAAMX,qBACX,wBAGE,EAAK0C,eAAe7C,EAAc4C,IACpC,EAAKd,SAAS,CACZtB,UAAU,EACVC,WAAW,eACNb,EADK,CAERc,eAAgB,EAAKoC,UACrBnC,eAAgB,EAAKoC,WAIvB,EAAKF,eAAe5C,EAAY0C,IAClC,EAAKb,SAAS,CACZtB,UAAU,EACVC,WAAW,eACNZ,EADK,CAERa,eAAgB,EAAKoC,UACrBnC,eAAgB,EAAKoC,YAjIV,EAuInBC,aAAe,WACb,EAAKlB,SAAS,CACZrB,WAAW,eAAMd,EAAP,CAA8BvB,aAAa,OAzItC,EA6InB2E,OAAS,WACPE,QAAQC,IAAI,iCACZ,EAAKpB,SAAS,CAAE1B,YAAY,KA/IX,EAkJnB0C,UAAY,WACVG,QAAQC,IAAI,aACZ,EAAKlC,cApJY,EAuJnBmC,gBAAkB,SAAClH,GAA4B,IAAxBiB,EAAuB,wDAC5C,IAA2B,IAAvB,EAAK2D,gBACToC,QAAQC,IAAI,kCAAmCjH,EAAIiB,IACf,GAAhC,EAAK4D,MAAMf,cAAc9D,IAA7B,CAGA,IAAIqE,EAAe,EAAKQ,MAAMf,eACX,IAAf7C,IACF,EAAK4E,SAAS,CAAExB,aAAcA,IAC9B2C,QAAQC,IAAI,sBAAuB5C,EAAanE,SAhKjC,EAoKnBiH,iBAAmB,SAAC1D,EAAMzD,GACxB,IAAIoH,EAAY3D,EAAK+C,QAAO,SAAC3F,GAAD,OAAaA,EAAQb,KAAOA,KAAI,GAC5D,OAAIoH,EAAUpG,gBAAkB,EAAK6D,MAAMR,aAAarD,iBACtD,EAAK6E,SAAS,CAAE/B,cAAesD,IAC/B3D,EAAOA,EACJ+C,QAAO,SAACa,GAAD,OAAmBA,EAAcrH,KAAOoH,EAAUpH,MACzDyG,OAAO,EAAK5B,MAAMR,eAIhB,MA9KU,EAiLnBgC,mBAAqB,SAAC5C,EAAM6D,GAC1BN,QAAQC,IAAI,kBAAmBxD,GAC/BuD,QAAQC,IAAI,kBAAmBK,GAE/B,IADA,IAAIC,EAAc,GACThB,EAAI,EAAGA,EAAI9C,EAAK0B,OAAQoB,IAAK,CAIpC,IAHA,IAAIxF,EAAI0C,EAAK8C,GACTiB,GAAoB,EAEfC,EAAI,EAAGA,EAAIH,EAAanC,OAAQsC,IACvC,GAAI1G,EAAEf,KAAOsH,EAAaG,GAAGzH,GAAI,CAC/BwH,GAAoB,EACpB,MAGAA,GACFD,EAAY7B,KAAK3E,GAIrB,OADAiG,QAAQC,IAAI,qBAAsBM,GAC3BA,GApMU,EAuMnBG,WAAa,SAACjE,GACZ,OAAOA,EAAKR,QAAO,SAAC7C,EAAKS,GAAN,OAAkBT,EAAMS,EAAQG,kBAAiB,IAxMnD,EA2MnB2G,UAAY,SAACxE,GACX6D,QAAQC,IAAI9D,EAAEyE,KACA,MAAVzE,EAAEyE,KACJ,EAAK/B,SAAS,CACZrB,WAAY,CACVrC,aAAa,EACbE,WAAY,aACZG,aAAa,uBAAD,OA/Sa,EA+Sb,0BA9Se,EA8Sf,sEAhTE,MAkTdG,aAAc,OACdE,aAAc,SACd4B,eAAgB,EAAKsC,aACrBrC,eAAgB,EAAKqC,iBArN3B,EAAKhC,YAAW,GAEhBiC,QAAQC,IAAI,wBAAyBY,KAAKC,UAAU,EAAKjD,QAJxC,E,8DAJDkD,GAChB,OAtFJ,SAAmBC,EAAKD,GACtB,IAAIE,EAAS,IAAIxG,MAAMsG,GACrBG,EAAMF,EAAI7C,OACVgD,EAAQ,IAAI1G,MAAMyG,GACpB,GAAIH,EAAIG,EAAK,MAAO,GACpB,KAAOH,KAAK,CACV,IAAI/E,EAAIqC,KAAKC,MAAMD,KAAKE,SAAW2C,GACnCD,EAAOF,GAAKC,EAAIhF,KAAKmF,EAAQA,EAAMnF,GAAKA,GACxCmF,EAAMnF,KAAOkF,KAAOC,EAAQA,EAAMD,GAAOA,EAE3C,OAAOD,EA4EEG,CAAUrI,KAAKH,MAAMiB,QAASkH,O,8CA0D9BtE,EAAMzD,GACb,IAAIqI,EAAM5E,EAAK6E,WAAU,SAACC,GAAD,OAAUA,EAAKvI,KAAOA,KAG/C,MAAO,CAFayD,EAAK4E,GACd,sBAAO5E,EAAKxD,MAAM,EAAGoI,IAArB,YAA8B5E,EAAKxD,MAAMoI,EAAM,Q,sCAI5C5E,GACd,IAAI+E,EAAUzI,KAAKkF,kBAAkB,GAAG,GACxC,OAAOxB,EAAKgD,OAAO+B,K,qCAKN/E,EAAM6D,GACnB,IAAMmB,EAEJC,IADApB,EAAanC,OAETwD,EAAiB5I,KAAK2H,WAAWjE,GAvKnB,KAwKpB,OAAOgF,GAAkBE,I,+BAmJjB,IAAD,OACH5E,EAAehE,KAAK8E,MAAMd,aAC1BC,EAAajE,KAAK8E,MAAMb,WACxB4E,EAAO7I,KAAK2H,WAAW3D,GACvB8E,EAAO9I,KAAK2H,WAAW1D,GAgCrB8E,EAAyB,SAACC,EAAUtF,EAAMzD,GAAQ,IAAD,EACrB,EAAKgJ,SAASvF,EAAMzD,GADC,mBAChD8D,EADgD,KACjCmF,EADiC,KAErD,EAAKpD,SAAS,CAAE/B,cAAeA,IAC/B,EAAK+B,SAAL,eAAiBkD,EAAWE,IAAY,kBACtC,EAAKnD,YAAY,EAAKjB,MAAMb,WAAY,EAAKa,MAAMd,kBAyCjDmF,EAAmB,WACvB,EAAKrD,SAAS,CAAEzB,cAAc,IAAS,WACrC+E,YAAW,WACT,KAxCsB,WAC1B,IAAIC,EAAqB,qBACrBC,EAAgB,EAAKhD,mBACvB,EAAKxB,MAAMd,aACX,EAAKc,MAAMX,sBAEToF,EACiB,OAAlBD,GAA0BA,EAAclE,QAAU,GACnDE,KAAKE,SAAW,GAElB,GA9WgB,IA8WZ8D,EAAclE,SAA6BmE,EAAoB,CACjE,IAEIC,EAAgBF,EADlBhE,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB8D,EAAclE,QAWlD,OARA2D,EACE,eACA,EAAKjE,MAAMd,aACXwF,EAAcvJ,IAGhBoJ,GAAkB,oBAAiBG,EAAcrJ,KAA/B,WAClB,EAAK2F,SAAS,CAAEvB,iBAAkB8E,IAIpC,GAAuC,IAAnC,EAAKvE,MAAMd,aAAaoB,QAAgBmE,EAAoB,CAC9D,IAAIE,EAAU,EAAKC,gBAAgB,EAAK5E,MAAMd,cAC9CqF,GAAkB,4BAClB,EAAKvD,SAAS,CAAEvB,iBAAkB8E,IAElC,EAAKvD,SAAS,CAAE9B,aAAcyF,IAAW,kBACvC,EAAK1D,YAAY,EAAKjB,MAAMb,WAAY,EAAKa,MAAMd,kBASjD2F,GADF,QAGE,EAAK7D,SAAS,CAAEzB,cAAc,OAnZd,UAkbxB,OACE,yBAAK7D,UAAU,eAAeoJ,SAAS,IAAIC,QAAS7J,KAAK4H,WACvD,kBAAC,IAAD,CACEkC,QAAS9J,KAAK8E,MAAMT,aACpB0F,SAAO,EACPC,KAAM,0BAER,kBAAC,IAAD,CAAgBF,OAAQ9J,KAAKH,MAAMkF,iBAAkBgF,SAAO,IAC5D,kBAACE,EAAA,EAAD,CACEC,MAAOlK,KAAK8E,MAAMN,SAClB2F,QAAQ,oDAGV,kBAAC,EAAD,CACE/H,YAAapC,KAAK8E,MAAML,WAAWrC,YACnCE,WAAYtC,KAAK8E,MAAML,WAAWnC,WAClCG,aAAczC,KAAK8E,MAAML,WAAWhC,aACpCG,aAAc5C,KAAK8E,MAAML,WAAW7B,aACpCD,eAAgB3C,KAAK8E,MAAML,WAAWC,eACtC5B,aAAc9C,KAAK8E,MAAML,WAAW3B,aACpCD,eAAgB7C,KAAK8E,MAAML,WAAWE,iBAExC,yBAAKnE,UAAU,mBACb,yBAAKA,UAAU,8BACb,kBAAC,IAAD,CAAM4J,GAAG,KACP,kBAACC,EAAA,EAAD,CAAQC,KAAK,KAAKC,MAAM,UAAU/J,UAAU,eAC1C,uBAAGA,UAAU,wBAInB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,yBACb,kBAAC,EAAD,CACEM,QAASd,KAAK8E,MAAMZ,sBAKxB,yBAAK1D,UAAU,qBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CACEU,YAAY,EACZJ,QAASd,KAAK8E,MAAMb,WACpB5D,IAAKyI,KAGT,6BACA,yBAAKtI,UAAU,iBACb,kBAAC,EAAD,CACEU,YAAY,EACZJ,QAASd,KAAK8E,MAAMd,aACpB3D,IAAKwI,OAKb,yBAAKrI,UAAU,iBACb,kBAAC,EAAD,CACEM,QAASd,KAAK8E,MAAMX,wBAIxB,yBACE9C,QAASrB,KAAK8E,MAAMT,aACpBpE,GAAG,iBACHO,UAAU,cAHZ,uBAOA,yBAAKP,GAAG,sBAAsBD,KAAK8E,MAAMP,mBAI3C,yBAAK/D,UAAU,gBACb,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CACEM,QAASd,KAAKsG,mBACZtG,KAAK8E,MAAMb,WACXjE,KAAK8E,MAAMZ,oBAEbzD,QAnMA,SAACR,GACf,IAA2B,IAAvB,EAAK4E,cACT,GAA+B,MAA3B,EAAKC,MAAMR,aAwBfyE,EAAuB,aAAc,EAAKjE,MAAMb,WAAYhE,GAC5DkJ,QAzBA,CACE,IAAIM,EAAU,EAAKrC,iBAAiB,EAAKtC,MAAMb,WAAYhE,GAC3C,OAAZwJ,GACF,EAAK3D,SAAS,CAAE7B,WAAYwF,IAAW,kBACrC,EAAK1D,YAAY,EAAKjB,MAAMb,WAAY,EAAKa,MAAMd,iBAErD,EAAK8B,SAAS,CAAExB,aAAc,OAC9B6E,KAGA,EAAKrD,SAAS,CACZrB,WAAW,eACNd,EADK,CAERlB,aACE,uEACFiC,eAAgB,EAAKsC,aACrBrC,eAAgB,EAAKqC,mBAkLf3G,IAAKyI,KAIT,yBAAKtI,UAAU,iBACb,yBACEA,UAC6B,MAA3BR,KAAK8E,MAAMR,aAAuB,gBAAkB,IAGtD,kBAAC,EAAD,CACErE,GAAID,KAAK8E,MAAMf,cAAc9D,GAC7BG,KAAMJ,KAAK8E,MAAMf,cAAc3D,KAC/BD,KAAMH,KAAK8E,MAAMf,cAAc5D,KAC/Bc,gBAAiBjB,KAAK8E,MAAMf,cAAc9C,gBAC1CR,QAAST,KAAKmH,mBAGlB,kBAAC,EAAD,CAAUpF,YAhIJ,WAClB,IAA2B,IAAvB,EAAK8C,cAMT,GALA,EAAKiB,SAAS,CAAExB,aAAc,OACX,EAAKgC,mBACtB,EAAKxB,MAAMb,WACX,EAAKa,MAAMZ,oBAEIkB,QA3ZD,EA4Zd,EAAKU,SAAS,CACZrB,WAAW,eACNd,EADK,CAERlB,aAAc,6CACdiC,eAAgB,EAAKsC,aACrBrC,eAAgB,EAAKqC,qBAN3B,CAYA,IAAIyC,EAAU,EAAKC,gBAAgBzF,GACnC,EAAK6B,SAAS,CAAE7B,WAAYwF,IAAW,kBACrC,EAAK1D,YAAY,EAAKjB,MAAMb,WAAY,EAAKa,MAAMd,iBAErDmF,SA4GU,yBAAK3I,UAAU,iBACb,kBAAC,EAAD,CACEM,QAASd,KAAKsG,mBACZtG,KAAK8E,MAAMd,aACXhE,KAAK8E,MAAMX,sBAEb9D,IAAKwI,EACL3H,YAAU,EACVT,QAAS,oBAWpBT,KAAK8E,MAAMV,YAAc,kBAAC,IAAD,CAAUgG,GAAG,W,GApdxBxJ,aA0dR4J,eAlhBS,SAAC1F,GAEvB,OADAmC,QAAQC,IAAI,+BAAgCpC,GACrC,CACLC,iBAAkBD,EAAM2F,SAASC,aA+gBtBF,CAAyB5F,GC1jBlC+F,E,kDAgCJ,WAAY9K,GAAQ,IAAD,8BACjB,cAAMA,IAGR+K,YAAc,SAACL,GACb,EAAKzE,SAAS,CAAEyE,MAAOA,KALN,E,qDAajB,OAJAtD,QAAQC,IAAIlH,KAAKH,MAAMiB,SAKrB,6BACE,kBAAC,EAAD,CAAUA,QAASd,KAAKH,MAAMiB,QAAQ2J,gB,GA/C3B7J,aAAb+J,EACGE,aAAe,CAEpBC,gBAAiB,CACf,CAAE7K,GAAI,EAAGE,KAAM,aAAcC,KAAM,OAAQa,gBAAiB,IAC5D,CAAEhB,GAAI,EAAGE,KAAM,WAAYC,KAAM,QAASa,gBAAiB,IAC3D,CAAEhB,GAAI,GAAIE,KAAM,UAAWC,KAAM,MAAOa,gBAAiB,IACzD,CAAEhB,GAAI,GAAIE,KAAM,aAAcC,KAAM,SAAUa,gBAAiB,KAC/D,CAAEhB,GAAI,GAAIE,KAAM,UAAWC,KAAM,WAAYa,gBAAiB,KAC9D,CAAEhB,GAAI,GAAIE,KAAM,aAAcC,KAAM,SAAUa,gBAAiB,IAC/D,CAAEhB,GAAI,GAAIE,KAAM,SAAUC,KAAM,SAAUa,gBAAiB,KAC3D,CAAEhB,GAAI,IAAKE,KAAM,QAASC,KAAM,SAAUa,gBAAiB,IAC3D,CAAEhB,GAAI,IAAKE,KAAM,aAAcC,KAAM,OAAQa,gBAAiB,IAC9D,CAAEhB,GAAI,IAAKE,KAAM,WAAYC,KAAM,QAASa,gBAAiB,IAC7D,CAAEhB,GAAI,MAAOE,KAAM,UAAWC,KAAM,MAAOa,gBAAiB,IAC5D,CAAEhB,GAAI,MAAOE,KAAM,aAAcC,KAAM,SAAUa,gBAAiB,KAClE,CAAEhB,GAAI,MAAOE,KAAM,UAAWC,KAAM,WAAYa,gBAAiB,KACjE,CAAEhB,GAAI,OAAQE,KAAM,aAAcC,KAAM,SAAUa,gBAAiB,IACnE,CAAEhB,GAAI,MAAOE,KAAM,SAAUC,KAAM,SAAUa,gBAAiB,KAC9D,CAAEhB,GAAI,UAAWE,KAAM,QAASC,KAAM,SAAUa,gBAAiB,IACjE,CAAEhB,GAAI,SAAUE,KAAM,aAAcC,KAAM,OAAQa,gBAAiB,IACnE,CAAEhB,GAAI,SAAUE,KAAM,WAAYC,KAAM,QAASa,gBAAiB,IAClE,CAAEhB,GAAI,YAAaE,KAAM,UAAWC,KAAM,MAAOa,gBAAiB,IAClE,CAAEhB,GAAI,OAAQE,KAAM,aAAcC,KAAM,SAAUa,gBAAiB,KACnE,CAAEhB,GAAI,OAAQE,KAAM,UAAWC,KAAM,WAAYa,gBAAiB,KAClE,CAAEhB,GAAI,OAAQE,KAAM,aAAcC,KAAM,SAAUa,gBAAiB,IACnE,CAAEhB,GAAI,QAASE,KAAM,SAAUC,KAAM,SAAUa,gBAAiB,KAChE,CAAEhB,GAAI,SAAUE,KAAM,QAASC,KAAM,SAAUa,gBAAiB,MA0BvDuJ,mBA3DS,SAAC1F,GACvB,MAAO,CACLhE,QAASgE,EAAM2F,YAyDJD,CAAyBG,G,0DC3C3BI,EAAa,SAACjK,GAAD,MAAc,CACtCV,KClB2B,gBDmB3B4K,QAASlK,IAGEmK,EAAU,SAACC,GAAD,MAAY,CACjC9K,KCxBoC,yBDyBpC4K,QAASE,IAGEC,EAAmB,iBAAO,CACrC/K,KC/B6B,kBDgC7B4K,QAAS,OAGEI,EAAgB,iBAAO,CAClChL,KCnCiC,sBDoCjC4K,QAAS,OAGX,SAASK,EAAT,GAAmE,IAAD,IAA1CpK,gBACtB,MAAO,CACLA,qBAF8D,MAAxB,EAAwB,EAG9Dd,KAH8D,EAArBA,KAIzCF,GAJ8D,EAAfA,GAK/CG,KAL8D,+CAKnDkL,MAAM,GAAGlL,KAAKD,M,IE7CvBoL,E,WAmCJ,aAAgC,IAApBC,EAAmB,uDAAL,IAAK,oBAC7BxL,KAAKyL,gBAAgBD,G,4DAlCPA,GACdxL,KAAK0L,eAAeF,K,8EAGDA,G,gFACe,IAA9BD,EAAaI,MAAMvG,O,yCAAqBpF,KAAK2L,O,OAE3CC,EAAM,qCACHpF,EAAI,E,YAAGA,EAAIgF,G,0CAEGK,MAAMD,GAAOpF,EAAI,GAAGsF,Y,cAAnC5D,E,OACJjB,QAAQC,IAAIY,KAAKC,UAAUG,I,UACFA,EAAO6D,O,QAA5BC,E,OACJ/E,QAAQC,IAAIY,KAAKC,UAAUiE,IAE3BT,EAAaI,MAAMhG,KAAK3F,KAAKqL,aAAaW,I,kDAE1C/E,QAAQiE,MAAR,M,QAT6B1E,I,gDAa1BxG,KAAK2L,O,uJAG4C,IAAD,IAA1C1K,gBACb,MAAO,CACLA,qBAFqD,MAAxB,EAAwB,EAGrDd,KAHqD,EAArBA,KAIhCF,GAJqD,EAAfA,GAKtCG,KALqD,+CAK1CkL,MAAM,GAAGlL,KAAKD,U,KA/BzBoL,EACGI,MAAQ,GAuCFJ,I,sCC5BTU,GAASC,KAAWC,OAAO,CAC/BC,OAAQ,CACNC,cAAeD,aAIbE,GAAqB,CACzBZ,eHf4B,yDAAM,WAAOa,GAAP,qBAAAC,EAAA,sDAClCD,EAASpB,KACHS,EAAM,qCACHpF,EAAI,EAHqB,YAGlBA,EALE,IAEgB,0CAKXqF,MAAMD,GAAOpF,EAAI,GAAGsF,YALT,cAK1B5D,EAL0B,iBAMCA,EAAO6D,OANR,QAM1BU,EAN0B,OAO9BF,EAASxB,EAAWM,EAAaoB,KAPH,kDAS9BxF,QAAQiE,MAAR,MACAqB,EAAStB,EAAQ,EAAD,KAVc,QAGDzE,IAHC,uBAalC+F,EAASnB,KAbyB,0DAAN,wDGkBxBsB,G,kLAEFzF,QAAQC,IAAIyF,SAASC,uBAAuB,OAAO,IAClC,IAAIC,IAAWF,SAASC,uBAAuB,OAAO,IAC5DE,KAAK,GAAGC,OAAO,KAC1B/M,KAAKH,MAAM6L,mB,+BAIX,OACE,yBAAKlL,UAAU,gBACb,gCACE,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,wBAAIA,UAAWwM,aAAIf,GAAOG,SAA1B,SAEE,kBAAC,KAAD,CAAQa,QAAM,GACZ,yBACEzM,UAAU,QACVE,IAAKwM,wBACLC,OAAO,KACP7M,MAAM,KACNK,IAAI,cARV,qBAYE,kBAAC,KAAD,CAAQsM,QAAM,GACZ,yBACEzM,UAAU,QACVE,IAAKwM,wBACLC,OAAO,KACP7M,MAAM,KACNK,IAAI,cAlBV,UAuBA,wBAAIH,UAAU,OAAd,8BAMR,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,wBACb,mDAEF,yBAAKA,UAAU,UACb,kBAAC,IAAD,CAAM4J,GAAG,YACP,4BAAQ5J,UAAU,2CAAlB,gBAIF,6BACA,kBAAC,IAAD,CAAM4J,GAAG,eACP,4BAAQ5J,UAAU,2CAAlB,gBAIF,6BACA,kBAAC,IAAD,CAAM4J,GAAG,cAAc5J,UAAU,QAC/B,4BACE4M,SAAO,EACP5M,UAAU,6CAEV,uD,GApEDI,aAgFJ4J,eAAQ,KAAM8B,GAAd9B,CAAkCkC,I,MCvElCW,OA1Bf,SAAoBxN,GAClB,OACE,kBAAC,IAAMoC,SAAP,KACE,yBAAKzB,UAAU,kBACb,kBAAC,IAAD,CAAM4J,GAAG,KACP,kBAACC,EAAA,EAAD,CAAQC,KAAK,KAAKC,MAAM,UAAU/J,UAAU,UAC1C,uBAAGA,UAAU,uBAGjB,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,kBACb,4DACA,0EACA,2ICWC8M,OAzBf,SAAoBzN,GAClB,OACE,kBAAC,IAAMoC,SAAP,KACE,kBAAC,IAAD,CAAMmI,GAAG,KACP,kBAACC,EAAA,EAAD,CAAQC,KAAK,KAAKC,MAAM,UAAU/J,UAAU,UAC1C,uBAAGA,UAAU,uBAIjB,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,kBACb,4DACA,mEACA,0ICYG6M,OA1Bf,SAAoBxN,GAClB,OACE,kBAAC,IAAMoC,SAAP,KACE,yBAAKzB,UAAU,8BACb,kBAAC,IAAD,CAAM4J,GAAG,KACP,kBAACC,EAAA,EAAD,CAAQC,KAAK,KAAKC,MAAM,UAAU/J,UAAU,UAC1C,uBAAGA,UAAU,qBAAsB,MAGvC,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,cAAd,kBACA,wBAAIA,UAAU,aAAd,8CAGA,gH,iDClBC+M,GAAW,WAGlB,IAFJzI,EAEG,uDAFK,CAAE4F,WAAW,EAAM8C,QAAS,KAAM/C,SAAU,IACpDgD,EACG,uCACH,OAAQA,EAAOrN,MACb,INN+B,sBMO7B,OAAO,eACF0E,EADL,CAEE4F,WAAW,EACX8C,QAAS,KACT/C,SAAU3F,EAAM2F,WAGpB,INf2B,kBMgBzB,OAAO,eAAK3F,EAAZ,CAAmB4F,WAAW,EAAM8C,QAAS,KAAM/C,SAAU,KAE/D,INhBkC,yBMiBhC,OAAO,eAAK3F,EAAZ,CAAmB4F,WAAW,EAAO8C,QAASC,EAAOzC,UAEvD,INlByB,gBMmBvB,OAAO,eACFlG,EADL,CAEE4F,WAAW,EACXD,SAAU3F,EAAM2F,SAAS/D,OAAO+G,EAAOzC,WAE3C,QACE,OAAOlG,IClBP4I,GCJUC,aACZC,aAAgB,CACdnD,SAAU8C,KAEZM,aAAgBC,KAAOC,ODCZ,SAASC,KACtB,OACE,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,KAAK,WAAWC,UAAWvD,IAClC,kBAAC,IAAD,CAAOsD,KAAK,cAAcC,UAAWb,KACrC,kBAAC,IAAD,CAAOY,KAAK,cAAcC,UAAWZ,KACrC,kBAAC,IAAD,CAAOW,KAAK,cAAcC,UAAWC,KACrC,kBAAC,IAAD,CAAOF,KAAK,eAAeG,OAAQzD,EAAK7J,UACxC,kBAAC,IAAD,CAAOuN,OAAK,EAACJ,KAAK,IAAIC,UAAWxB,OEdzC,IAoBe4B,G,uKAZX,OACE,kBAAC,IAAD,CAAeC,SATL,YAUR,yBAAK/N,UAAU,qBACb,yBAAKA,UAAU,OACb,kBAACwN,GAAD,a,GAVMpN,a,OCIlB4N,IAASJ,OACP,kBAAC,IAAMK,WAAP,KACE,kBAAC,GAAD,OAEF9B,SAAS+B,eAAe,SrBmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/D,GACLjE,QAAQiE,MAAMA,EAAMf,a","file":"static/js/main.65e57a31.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../css/Pokecard.css\";\n\n// const POKE_API =\n//   \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\";\n\nconst POKE_API = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n\nlet padToThree = (number) => (number <= 999 ? `00${number}`.slice(-3) : number);\nclass Pokecard extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let imgSrc = `${POKE_API}${padToThree(this.props.id)}.png`;\n    let name = this.props.name;\n    let type = this.props.type;\n    let exp = this.props.exp;\n    let width = 100;\n\n    if (this.props.usedAs === \"ComputerCardUage\") {\n      imgSrc = \"team-rocket.png\";\n      name = \"Pokemon\";\n      type = \"??\";\n      exp = \"??\";\n      width = 60;\n    }\n\n    return (\n      <div\n        className=\"Pokecard\"\n        onClick={() => this.props.onClick(this.props.id)}\n      >\n        <h6 className=\"Pokecard-title\">{name}</h6>\n        <div className=\"Pokecard-image\">\n          <img src={imgSrc} alt={this.props.name} width={width} />\n        </div>\n        <div className=\"Pokecard-data\">Type: {type}</div>\n        <div className=\"Pokecard-data\">EXP: {exp}</div>\n      </div>\n    );\n  }\n}\n\nexport default Pokecard;\n","import React, { Component } from \"react\";\nimport Pokecard from \"./Pokecard\";\n\nclass Pokedex extends Component {\n  render() {\n    return (\n      <div className=\"Pokedex\">\n        {/* {title} */}\n        {/* {playerName} */}\n        <div className=\"Pokedex-cards\">\n          {this.props.pokemon.map((p) => (\n            <Pokecard\n              id={p.id}\n              name={p.name}\n              type={p.type}\n              exp={p.base_experience}\n              onClick={this.props.onClick}\n              usedAs={\n                this.props.isComputer ? \"ComputerCardUage\" : \"HumanCardUsage\"\n              }\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Pokedex;\n","import React, { Component } from \"react\";\nimport \"../css/DiscardCard.css\";\n\nconst POKE_API = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n\nlet padToThree = (number) => (number <= 999 ? `00${number}`.slice(-3) : number);\n\nexport default class DiscardCard extends Component {\n  render() {\n    let imgSrc = `${POKE_API}${padToThree(this.props.id)}.png`;\n    let width = 120;\n    let hidePokemonDetails = false;\n\n    if (this.props.id === -1) {\n      imgSrc = \"transparent-pokemon-2.png\";\n      width = 90;\n      hidePokemonDetails = true;\n    }\n\n    return (\n      <div\n        className=\"DiscardCard\"\n        onClick={() => this.props.onClick(this.props.id)}\n      >\n        <div className=\"DiscardCard-data\" hidden={hidePokemonDetails}>\n          Type: {this.props.type}\n        </div>\n        <div className=\"DiscardCard-data\" hidden={hidePokemonDetails}>\n          EXP: {this.props.base_experience}\n        </div>\n        <div className=\"DiscardCard-image\">\n          <img src={imgSrc} alt={this.props.name} width={width} />\n        </div>\n        <h6 className=\"DiscardCard-title\" hidden={hidePokemonDetails}>\n          {this.props.name}\n        </h6>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../css/CompletedSet.css\";\n\n// This function takes an array of pokemons\n// and return an array where its guaranteed that there will be only one pokemon per type\n// for eg [{fire}, {fire}, {water}]\n// return [{fire}, {water}]\nfunction getOnePerType(pokemonArray) {\n  var dictionary = new Map(\n    pokemonArray.map((pokemon) => [pokemon.type, pokemon])\n  );\n  return Array.from(dictionary.values());\n}\n\nexport default class CompletedSet extends Component {\n  render() {\n    return (\n      <div className=\"CompletedSet-wrapper\">\n        {getOnePerType(this.props.pokemon)\n          // .splice(0, 5)\n          .map((pokemon) => (\n            <div className=\"CompletedSet\">\n              <div className=\"CompletedSet-content\">\n                <div id={pokemon.id}>{pokemon.type}</div> <br />\n              </div>\n            </div>\n          ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../css/CardDeck.css\";\n\nexport default class CardDeck extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"CardDeck\" onClick={this.props.onDeckClick}>\n          <div className=\"CardDeck-image\">\n            <img src=\"pokeball.png\" width=\"105\" alt=\"Pokeball\" />\n          </div>\n          <h5 className=\"CardDeck-title\">Card ~ Deck</h5>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Card, CardBody, Modal, ModalHeader, ModalBody } from \"reactstrap\";\nimport \"../css/PokeModal.css\";\n\nexport default class PokeModal extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"modal\">\n          <Modal isOpen={this.props.isModalOpen} className=\"modal-dialog\">\n            <ModalHeader className=\"justify-content-center modal-header\">\n              <h1>{this.props.modalTitle}</h1>\n            </ModalHeader>\n            <ModalBody className=\"modal-body\">\n              <Card className=\"card\">\n                <h2>{this.props.modalContent}</h2>\n                <CardBody className=\"btn-group\">\n                  <div>\n                    <button\n                      className=\"button1\"\n                      type=\"submit\"\n                      onClick={this.props.onClickButton1}\n                    >\n                      {this.props.modalButton1}\n                    </button>\n                    <button\n                      className=\"button2\"\n                      type=\"submit\"\n                      onClick={this.props.onClickButton2}\n                    >\n                      {this.props.modalButton2}\n                    </button>\n                  </div>\n                </CardBody>\n              </Card>\n            </ModalBody>\n          </Modal>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../css/ScoreList.css\";\n\nclass ScoreList extends Component {\n  render() {\n    const typeWithCount = Array.from(\n      this.props.pokemon\n        .map((x) => x.type)\n        .reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map())\n    );\n    let playerName = \"YOU\";\n    if (this.props.isComputer) {\n      playerName = \"COMPUTER\";\n    }\n    return (\n      <div>\n        <h5 className=\"ScoreList-title\">{playerName}</h5>\n        <div className=\"Score\">\n          <h6>\n            SCORE : <span className=\"scoreCount\">{this.props.exp}</span>\n          </h6>\n        </div>\n        <div className=\"ScoreList-content\">\n          <ul>\n            {typeWithCount.map(([type, count]) => (\n              <div className=\"ScoreList-data\">\n                <span className=\"count\">{count} </span>\n                <span className=\"type\">{type} type</span>\n              </div>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScoreList;\n","import React, { Component } from \"react\";\nimport Pokedex from \"./Pokedex\";\nimport DiscardCard from \"./DiscardCard\";\nimport CompletedSet from \"./CompletedSet\";\nimport CardDeck from \"./CardDeck\";\nimport PokeModal from \"./PokeModal\";\nimport { Redirect } from \"react-router-dom\";\nimport ScoreList from \"./ScoreList\";\nimport \"../css/Pokedex.css\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { Button } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport { Prompt } from \"react-router\";\nimport { connect } from \"react-redux\";\n\n// CONSTANTS DEFINED HERE\nconst timeForComputerMove = 1500;\nconst pointsToWinGame = 1600;\nconst completedSetCountToWinGame = 3;\nconst cardCoundNeededToCompleteSet = 3;\nconst maxCardInDeck = 7;\n\nfunction getRandom(arr, n) {\n  var result = new Array(n),\n    len = arr.length,\n    taken = new Array(len);\n  if (n > len) return [];\n  while (n--) {\n    var x = Math.floor(Math.random() * len);\n    result[n] = arr[x in taken ? taken[x] : x];\n    taken[x] = --len in taken ? taken[len] : len;\n  }\n  return result;\n}\n\n// This function returns an array with count for each type\n// for eg if the hand that is passed is: [\"fire\", \"fire\", \"water\"]\n// this function will return [[\"fire\",2], [\"water\", 1]\nfunction getTypeCount(hand) {\n  // This is calculating how many pokemons of each type are there.-hero\n  // For eg if the hand is [\"fire\", \"fire\", \"something\"] the countOfEachType array\n  // will look like: [\"fire\":2, \"something\":1]\n  let countOfEachType = Array.from(\n    hand\n      .map((x) => x.type)\n      .reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map())\n  );\n  return countOfEachType;\n}\n\nconst mapStateToProps = (state) => {\n  console.log(\"Got state in map........++++\", state);\n  return {\n    isPokemonLoading: state.pokemons.isLoading,\n  };\n};\n\nconst cantAddCardorMakeMove = {\n  isModalOpen: true,\n  modalTitle: \"INVALID MOVE !\",\n  modalContent: \"\",\n  modalButton1: \"Cool\",\n  modalButton2: \"Got it\",\n};\n\nconst computerWonModal = {\n  isModalOpen: true,\n  modalTitle: \"Game over !!\",\n  modalContent: \"Computer Won! Better luck next time\",\n  modalButton1: \"New game\",\n  modalButton2: \"Home\",\n};\n\nconst humanWonModal = {\n  isModalOpen: true,\n  modalTitle: \"Game Over !!\",\n  modalContent: \"Congratulations .. You WON !\",\n  modalButton1: \"New game\",\n  modalButton2: \"Home\",\n};\n\nconst defaultState = {\n  discardedCard: { id: -1, name: \"\", type: \"\", exp: \"\" },\n  computerHand: [],\n  playerHand: [],\n  completedSetPlayer: [],\n  completedSetComputer: [],\n  isRedirect: false,\n  isPlayerTurn: true,\n  selectedCard: null,\n  computerLastMove: \"\",\n  gameOver: false,\n  modalState: {\n    isModalOpen: false,\n    modalTitle: \"\",\n    modalContent: \"\",\n    modalButton1: \"\",\n    modalButton2: \"\",\n    onButtonClick1: null,\n    onButtonClick2: null,\n  },\n  // for modal texting uncomment the below modalState and comment the above one!\n\n  // modalState: humanWonModal,\n};\n\nclass Pokegame extends Component {\n  getNRandomPokemon(n) {\n    return getRandom(this.props.pokemon, n);\n  }\n\n  constructor(props) {\n    super(props);\n    this.resetState(true);\n\n    console.log(\"State in constructor:\", JSON.stringify(this.state));\n  }\n\n  canMakeMove = () => this.state.isPlayerTurn && !this.props.isPokemonLoading;\n\n  resetState = (initialize = false) => {\n    let computerHand = [];\n    // We first take 2*MaxCards in playerHand\n    // then we pick a random index between 0 and length of player hand\n    // and move that card to computer hand. We keep doing this till\n    // player hand and computer hand are equal\n    let playerHand = [...this.getNRandomPokemon(maxCardInDeck * 2)];\n    while (computerHand.length < playerHand.length) {\n      let randIdx = Math.floor(Math.random() * playerHand.length);\n      let randPokemon = playerHand.splice(randIdx, 1)[0];\n      computerHand.push(randPokemon);\n    }\n\n    let shouldRedirect = !computerHand || !computerHand.length;\n\n    // for first time this.state = is necessary.\n    // its like using a variable for first time, let x is necessary.\n    // after that we can keep doing x=10, x=100 etc.\n    // same way first time we need to assign something to state.After that we can keep doing setState\n    if (initialize) {\n      this.state = defaultState;\n      this.state.computerHand = computerHand;\n      this.state.playerHand = playerHand;\n      this.state.completedSetPlayer = this.getCompletedSets(\n        this.state.playerHand\n      );\n      this.state.completedSetComputer = this.getCompletedSets(\n        this.state.computerHand\n      );\n      this.state.isRedirect = shouldRedirect;\n      if (shouldRedirect) {\n        this.state.gameOver = true;\n      }\n    } else {\n      this.setState(defaultState);\n      this.setState(\n        { playerHand: playerHand, computerHand: computerHand },\n        () => this.checkWinner(this.state.playerHand, this.state.computerHand)\n      );\n      this.setState({ isRedirect: shouldRedirect });\n      if (shouldRedirect) {\n        this.setState({ gameOver: true });\n      }\n    }\n  };\n\n  makeMove(hand, id) {\n    let idx = hand.findIndex((card) => card.id === id);\n    let discardedCard = hand[idx];\n    let newHand = [...hand.slice(0, idx), ...hand.slice(idx + 1)];\n    return [discardedCard, newHand];\n  }\n\n  getCardFromDeck(hand) {\n    let newCard = this.getNRandomPokemon(1)[0];\n    return hand.concat(newCard);\n  }\n\n  // Winning by set = 3 sets of 3 card each\n  // Winning by exp == pointsToWinGame points\n  isAWinningHand(hand, completedSet) {\n    const ifWinningBySet =\n      completedSet.length ===\n      cardCoundNeededToCompleteSet * completedSetCountToWinGame;\n    const ifWinningByExp = this.getHandSum(hand) > pointsToWinGame;\n    return ifWinningBySet || ifWinningByExp;\n  }\n\n  setCompletedState = (stateHand, currentCompletedSet, completedHandName) => {\n    let completedSets = this.getCompletedSets(stateHand, currentCompletedSet);\n    this.setState({ [completedHandName]: completedSets });\n    return completedSets;\n  };\n\n  getCompletedSets = (stateHand, currentCompletedSet = []) => {\n    let deck = this.filterCompletedSet(stateHand, currentCompletedSet);\n    let playerTypeCount = getTypeCount(deck);\n    let completedSets = [];\n    for (let i = 0; i < playerTypeCount.length; i++) {\n      let [type, count] = playerTypeCount[i];\n      if (count >= cardCoundNeededToCompleteSet) {\n        completedSets.push(\n          ...deck\n            .filter((p) => p.type === type)\n            .slice(0, cardCoundNeededToCompleteSet)\n        );\n      }\n    }\n    return currentCompletedSet.concat(completedSets);\n  };\n\n  checkWinner = (playerHand, computerHand) => {\n    let newCompletedSetPlayer = this.setCompletedState(\n      playerHand,\n      this.state.completedSetPlayer,\n      \"completedSetPlayer\"\n    );\n\n    let newCompletedSetComputer = this.setCompletedState(\n      computerHand,\n      this.state.completedSetComputer,\n      \"completedSetComputer\"\n    );\n\n    if (this.isAWinningHand(computerHand, newCompletedSetComputer)) {\n      this.setState({\n        gameOver: true,\n        modalState: {\n          ...computerWonModal,\n          onButtonClick1: this.onNewGame,\n          onButtonClick2: this.toHome,\n        },\n      });\n    }\n    if (this.isAWinningHand(playerHand, newCompletedSetPlayer)) {\n      this.setState({\n        gameOver: true,\n        modalState: {\n          ...humanWonModal,\n          onButtonClick1: this.onNewGame,\n          onButtonClick2: this.toHome,\n        },\n      });\n    }\n  };\n\n  dismissModal = () => {\n    this.setState({\n      modalState: { ...cantAddCardorMakeMove, isModalOpen: false },\n    });\n  };\n\n  toHome = () => {\n    console.log(\"home link....................\");\n    this.setState({ isRedirect: true });\n  };\n\n  onNewGame = () => {\n    console.log(\"onNewGame\");\n    this.resetState();\n  };\n\n  swapDiscardCard = (id, isComputer = false) => {\n    if (this.canMakeMove() === false) return;\n    console.log(\"swap discard card..............\", id, isComputer);\n    if (this.state.discardedCard.id == -1) {\n      return;\n    }\n    let selectedCard = this.state.discardedCard;\n    if (isComputer === false) {\n      this.setState({ selectedCard: selectedCard });\n      console.log(\"SELECTED POKEMON : \", selectedCard.name);\n    }\n  };\n\n  swapCardFromHand = (hand, id) => {\n    let matchCard = hand.filter((pokemon) => pokemon.id === id)[0];\n    if (matchCard.base_experience > this.state.selectedCard.base_experience) {\n      this.setState({ discardedCard: matchCard });\n      hand = hand\n        .filter((removeMatched) => removeMatched.id !== matchCard.id)\n        .concat(this.state.selectedCard);\n      return hand;\n    }\n\n    return null;\n  };\n\n  filterCompletedSet = (hand, completedSet) => {\n    console.log(\"Current hand is\", hand);\n    console.log(\"CompletedSet is\", completedSet);\n    let returnValue = [];\n    for (let i = 0; i < hand.length; i++) {\n      let p = hand[i];\n      let notInCompletedSet = true;\n\n      for (let j = 0; j < completedSet.length; j++) {\n        if (p.id === completedSet[j].id) {\n          notInCompletedSet = false;\n          break;\n        }\n      }\n      if (notInCompletedSet) {\n        returnValue.push(p);\n      }\n    }\n    console.log(\"Returned value is \", returnValue);\n    return returnValue;\n  };\n\n  getHandSum = (hand) => {\n    return hand.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\n  };\n\n  showRules = (e) => {\n    console.log(e.key);\n    if (e.key === \"r\") {\n      this.setState({\n        modalState: {\n          isModalOpen: true,\n          modalTitle: \"Game Rules\",\n          modalContent: `Objective : Collect ${completedSetCountToWinGame} sets (1 set = ${cardCoundNeededToCompleteSet} cards) different types of pokemon or score >\n            ${pointsToWinGame}`,\n          modalButton1: \"Cool\",\n          modalButton2: \"Got it\",\n          onButtonClick1: this.dismissModal,\n          onButtonClick2: this.dismissModal,\n        },\n      });\n    }\n  };\n\n  render() {\n    let computerHand = this.state.computerHand;\n    let playerHand = this.state.playerHand;\n    let exp1 = this.getHandSum(computerHand);\n    let exp2 = this.getHandSum(playerHand);\n\n    const onclick = (id) => {\n      if (this.canMakeMove() === false) return;\n      if (this.state.selectedCard != null) {\n        let newHand = this.swapCardFromHand(this.state.playerHand, id);\n        if (newHand !== null) {\n          this.setState({ playerHand: newHand }, () =>\n            this.checkWinner(this.state.playerHand, this.state.computerHand)\n          );\n          this.setState({ selectedCard: null });\n          makeComputerMove();\n        } else {\n          // this means that a pokemon with less experience was selected\n          this.setState({\n            modalState: {\n              ...cantAddCardorMakeMove,\n              modalContent:\n                \"Can't make a move ! Should have picked a pokemon with a higher EXP !\",\n              onButtonClick1: this.dismissModal,\n              onButtonClick2: this.dismissModal,\n            },\n          });\n        }\n        return;\n      }\n\n      // Hand2 is always human so we will only search in humans hand\n      discardCardAndSetState(\"playerHand\", this.state.playerHand, id);\n      makeComputerMove();\n    };\n\n    const discardCardAndSetState = (handName, hand, id) => {\n      let [discardedCard, newHand2] = this.makeMove(hand, id);\n      this.setState({ discardedCard: discardedCard });\n      this.setState({ [handName]: newHand2 }, () =>\n        this.checkWinner(this.state.playerHand, this.state.computerHand)\n      );\n    };\n\n    const logicOfComputerMove = () => {\n      let computerMovePrefix = \"Computer's Move : \";\n      let filteredCards = this.filterCompletedSet(\n        this.state.computerHand,\n        this.state.completedSetComputer\n      );\n      let shouldPickFromDeck =\n        (filteredCards !== null && filteredCards.length <= 1) ||\n        Math.random() > 0.5;\n\n      if (filteredCards.length === maxCardInDeck || !shouldPickFromDeck) {\n        let randomIdxToDiscard =\n          Math.floor(Math.random() * 100) % filteredCards.length;\n        let cardDiscarded = filteredCards[randomIdxToDiscard];\n\n        discardCardAndSetState(\n          \"computerHand\",\n          this.state.computerHand,\n          cardDiscarded.id\n        );\n\n        computerMovePrefix += `Discarded ${cardDiscarded.name} !`;\n        this.setState({ computerLastMove: computerMovePrefix });\n        return;\n      }\n\n      if (this.state.computerHand.length === 1 || shouldPickFromDeck) {\n        let newHand = this.getCardFromDeck(this.state.computerHand);\n        computerMovePrefix += `Picked a card from deck !`;\n        this.setState({ computerLastMove: computerMovePrefix });\n\n        this.setState({ computerHand: newHand }, () =>\n          this.checkWinner(this.state.playerHand, this.state.computerHand)\n        );\n      }\n    };\n\n    const makeComputerMove = () => {\n      this.setState({ isPlayerTurn: false }, () => {\n        setTimeout(() => {\n          try {\n            logicOfComputerMove();\n          } finally {\n            this.setState({ isPlayerTurn: true });\n          }\n        }, timeForComputerMove);\n      });\n    };\n    const onDeckClick = () => {\n      if (this.canMakeMove() === false) return;\n      this.setState({ selectedCard: null });\n      let filteredHand = this.filterCompletedSet(\n        this.state.playerHand,\n        this.state.completedSetPlayer\n      );\n      if (filteredHand.length >= maxCardInDeck) {\n        this.setState({\n          modalState: {\n            ...cantAddCardorMakeMove,\n            modalContent: \"Can't add more cards ! Discard few cards !\",\n            onButtonClick1: this.dismissModal,\n            onButtonClick2: this.dismissModal,\n          },\n        });\n\n        return;\n      }\n      let newHand = this.getCardFromDeck(playerHand);\n      this.setState({ playerHand: newHand }, () =>\n        this.checkWinner(this.state.playerHand, this.state.computerHand)\n      );\n      makeComputerMove();\n    };\n\n    return (\n      <div className=\"game-wrapper\" tabIndex=\"0\" onKeyUp={this.showRules}>\n        <LoadingOverlay\n          active={!this.state.isPlayerTurn}\n          spinner\n          text={\"Computer's Move . . .\"}\n        />\n        <LoadingOverlay active={this.props.isPokemonLoading} spinner />\n        <Prompt\n          when={!this.state.gameOver}\n          message=\"Are you sure you want to leave the Poke-battle?\"\n        />\n\n        <PokeModal\n          isModalOpen={this.state.modalState.isModalOpen}\n          modalTitle={this.state.modalState.modalTitle}\n          modalContent={this.state.modalState.modalContent}\n          modalButton1={this.state.modalState.modalButton1}\n          onClickButton1={this.state.modalState.onButtonClick1}\n          modalButton2={this.state.modalState.modalButton2}\n          onClickButton2={this.state.modalState.onButtonClick2}\n        />\n        <div className=\"container-fluid\">\n          <div className=\"row justify-content-center\">\n            <Link to=\"/\">\n              <Button size=\"lg\" color=\"success\" className=\"home-button\">\n                <i className=\"fa fa-home fa-lg\" />\n              </Button>\n            </Link>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <div className=\"CompleteSet-1 mt-auto\">\n                <CompletedSet\n                  pokemon={this.state.completedSetPlayer}\n                  // pokemon={this.state.computerHand}\n                />\n              </div>\n\n              <div className=\"scorelist-wrapper\">\n                <div className=\"container\">\n                  <div className=\"ScoreList row\">\n                    <ScoreList\n                      isComputer={false}\n                      pokemon={this.state.playerHand}\n                      exp={exp2}\n                    />\n                  </div>\n                  <br />\n                  <div className=\"ScoreList row\">\n                    <ScoreList\n                      isComputer={true}\n                      pokemon={this.state.computerHand}\n                      exp={exp1}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\"CompleteSet-2\">\n                <CompletedSet\n                  pokemon={this.state.completedSetComputer}\n                  // pokemon={this.state.computerHand}\n                />\n              </div>\n              <div\n                hidden={!this.state.isPlayerTurn}\n                id=\"PlayerMoveText\"\n                className=\"PlayerMove\"\n              >\n                Player's Move . . .\n              </div>\n              <div id=\"ComputerMoveDetail\">{this.state.computerLastMove}</div>\n              {/* </div> */}\n            </div>\n\n            <div className=\"col-9 m-auto\">\n              <div className=\"container-fluid border-me\">\n                <div className=\"row center-me\">\n                  <Pokedex\n                    pokemon={this.filterCompletedSet(\n                      this.state.playerHand,\n                      this.state.completedSetPlayer\n                    )}\n                    onClick={onclick}\n                    exp={exp2}\n                  />\n                </div>\n\n                <div className=\"row center-me\">\n                  <div\n                    className={\n                      this.state.selectedCard != null ? \" CardSelected\" : \"\"\n                    }\n                  >\n                    <DiscardCard\n                      id={this.state.discardedCard.id}\n                      type={this.state.discardedCard.type}\n                      name={this.state.discardedCard.name}\n                      base_experience={this.state.discardedCard.base_experience}\n                      onClick={this.swapDiscardCard}\n                    />\n                  </div>\n                  <CardDeck onDeckClick={onDeckClick} />\n                </div>\n\n                <div className=\"row center-me\">\n                  <Pokedex\n                    pokemon={this.filterCompletedSet(\n                      this.state.computerHand,\n                      this.state.completedSetComputer\n                    )}\n                    exp={exp1}\n                    isComputer\n                    onClick={() => {}}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Copied from this: https://stackoverflow.com/questions/43230194/how-to-use-redirect-in-the-new-react-router-dom-of-reactjs\n          Redirect needs to be part of render function. It doesn't matter where it is put in html as we are moving away from this page\n          Also read tutorial on conditional rendering: https://reactjs.org/docs/conditional-rendering.html*/}\n        {this.state.isRedirect && <Redirect to=\"/\" />}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(Pokegame);\n","import React, { Component } from \"react\";\nimport Pokegame from \"./Pokegame\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n  return {\n    pokemon: state.pokemons,\n  };\n};\n\nclass Main extends Component {\n  static defaultProps = {\n    // COMMENT: Remove the comment from the  line just below this before testing\n    mainPokemonData: [\n      { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\n      { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n      { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n      { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n      { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n      { id: 39, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\n      { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n      { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 },\n      { id: 411, name: \"Charmander\", type: \"fire\", base_experience: 62 },\n      { id: 711, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n      { id: 11111, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n      { id: 12111, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n      { id: 25111, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n      { id: 391111, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\n      { id: 94111, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n      { id: 133111111, name: \"Eevee\", type: \"normal\", base_experience: 65 },\n      { id: 40010101, name: \"Charmander\", type: \"fire\", base_experience: 62 },\n      { id: 70019291, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n      { id: 11112345678, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n      { id: 129876, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n      { id: 254321, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n      { id: 390123, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\n      { id: 9401234, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n      { id: 13334556, name: \"Eevee\", type: \"normal\", base_experience: 65 },\n    ],\n    // COMMENT: Remove the line just below this before testing\n    // mainPokemonData: PokemonCache.cache,\n  };\n  constructor(props) {\n    super(props);\n  }\n\n  changeColor = (color) => {\n    this.setState({ color: color });\n  };\n\n  render() {\n    console.log(this.props.pokemon);\n    // if /pokemon/1 is called then\n    // render will be called with id == 1\n    // then in render we call pokemon function and give it id 1\n    return (\n      <div>\n        <Pokegame pokemon={this.props.pokemon.pokemons} />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(Main);\n","import * as ActionTypes from \"./ActionTypes\";\n\nconst maxPokemons = 14;\n\nexport const getPokemonData = () => async (dispatch) => {\n  dispatch(onLoadingStarted());\n  const url = \"https://pokeapi.co/api/v2/pokemon/\";\n  for (let i = 0; i < maxPokemons; i++) {\n    try {\n      let result = await fetch(url + (i + 1).toString());\n      let jsonDataFromServer = await result.json();\n      dispatch(addPokemon(convertModel(jsonDataFromServer)));\n    } catch (err) {\n      console.error(err);\n      dispatch(onError(err));\n    }\n  }\n  dispatch(pokemonLoaded());\n};\n\nexport const addPokemon = (pokemon) => ({\n  type: ActionTypes.POKEMON_ADDED,\n  payload: pokemon,\n});\n\nexport const onError = (error) => ({\n  type: ActionTypes.POKEMON_LOADING_FAILED,\n  payload: error,\n});\n\nexport const onLoadingStarted = () => ({\n  type: ActionTypes.POKEMON_LOADING,\n  payload: null,\n});\n\nexport const pokemonLoaded = () => ({\n  type: ActionTypes.POKEMON_DATA_LOADED,\n  payload: null,\n});\n\nfunction convertModel({ base_experience = 0, name, id, ...rest }) {\n  return {\n    base_experience: base_experience,\n    name: name,\n    id: id,\n    type: rest.types[0].type.name,\n  };\n}\n","export const POKEMON_LOADING = \"POKEMON_LOADING\";\nexport const POKEMON_DATA_LOADED = \"POKEMON_DATA_LOADED\";\nexport const POKEMON_LOADING_FAILED = \"POKEMON_LOADING_FAILED\";\nexport const POKEMON_ADDED = \"POKEMON_ADDED\";\n","class PokemonCache {\n  static cache = [];\n  triggerDownload(maxPokemons) {\n    this.getPokemonData(maxPokemons);\n  }\n\n  async getPokemonData(maxPokemons) {\n    if (PokemonCache.cache.length !== 0) return this.cache;\n    // let cntr = 0;\n    const url = \"https://pokeapi.co/api/v2/pokemon/\";\n    for (let i = 0; i < maxPokemons; i++) {\n      try {\n        let result = await fetch(url + (i + 1).toString());\n        console.log(JSON.stringify(result));\n        let responseBody = await result.json();\n        console.log(JSON.stringify(responseBody));\n        // let pokemonData = this.convertModel(responseBody);\n        PokemonCache.cache.push(this.convertModel(responseBody));\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    return this.cache;\n  }\n\n  convertModel({ base_experience = 0, name, id, ...rest }) {\n    return {\n      base_experience: base_experience,\n      name: name,\n      id: id,\n      type: rest.types[0].type.name,\n    };\n  }\n\n  constructor(maxPokemons = 200) {\n    this.triggerDownload(maxPokemons);\n  }\n}\n\nexport default PokemonCache;\n","import React, { Component } from \"react\";\nimport { Button } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport CircleType from \"circletype\";\nimport \"../css/Home.css\";\nimport { connect } from \"react-redux\";\nimport { getPokemonData } from \"../redux/pokemonFetch\";\nimport PokemonCache from \"../PokemonCache\";\nimport { fadeIn } from \"react-animations\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport Rotate from \"react-reveal/Rotate\";\n\nconst styles = StyleSheet.create({\n  fadeIn: {\n    animationName: fadeIn,\n  },\n});\n\nconst mapDispatchToProps = {\n  getPokemonData,\n};\n\nclass Home extends Component {\n  componentDidMount() {\n    console.log(document.getElementsByClassName(\"arc\")[0]);\n    let circleType = new CircleType(document.getElementsByClassName(\"arc\")[0]);\n    circleType.dir(-1).radius(350);\n    this.props.getPokemonData();\n  }\n\n  render() {\n    return (\n      <div className=\"home-wrapper\">\n        <header>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <h1 className={css(styles.fadeIn)}>\n                  Ƥ\n                  <Rotate bottom>\n                    <img\n                      className=\"image\"\n                      src={process.env.PUBLIC_URL + \"/pokeball.png\"}\n                      height=\"70\"\n                      width=\"70\"\n                      alt=\"Pokeball\"\n                    />\n                  </Rotate>\n                  Ƙℯḿ\n                  <Rotate bottom>\n                    <img\n                      className=\"image\"\n                      src={process.env.PUBLIC_URL + \"/pokeball.png\"}\n                      height=\"70\"\n                      width=\"70\"\n                      alt=\"Pokeball\"\n                    />\n                  </Rotate>\n                  ȵ\n                </h1>\n                <h3 className=\"arc\">..let the battle begin</h3>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"container-fluid\">\n          <div className=\"battleCard\">\n            <div className=\"row justify-content-center\">\n              <div className=\"col-md-9 col-11 mb-2\">\n                <h5>Choose Your Battle</h5>\n              </div>\n              <div className=\"col-12\">\n                <Link to=\"/pokemon\">\n                  <button className=\"mt-md-1 p-2 col-md-6 col-8 all-btn btn1\">\n                    vs Computer\n                  </button>\n                </Link>\n                <br />\n                <Link to=\"/friendgame\">\n                  <button className=\"mt-md-3 p-2 col-md-6 col-8 all-btn btn2\">\n                    vs A Friend\n                  </button>\n                </Link>\n                <br />\n                <Link to=\"/game_rules\" className=\"mt-2\">\n                  <button\n                    outline\n                    className=\"mt-md-3 col-md-6 col-8 all-btn game-rules\"\n                  >\n                    <span>Game Rules</span>\n                  </button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Home);\n","import React, { Component } from \"react\";\nimport \"../css/Game.css\";\nimport { Button } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nfunction FriendGame(props) {\n  return (\n    <React.Fragment>\n      <div className=\"friend-wrapper\">\n        <Link to=\"/\">\n          <Button size=\"lg\" color=\"success\" className=\"button\">\n            <i className=\"fa fa-home fa-lg\" />\n          </Button>\n        </Link>\n        <div className=\"container card-coming-soon\">\n          <div className=\"row justify-content-center\">\n            <div className=\"col-md-6 col-8\">\n              <h4>. . CØMING SØØN . .</h4>\n              <h6>Want to have a POKE-BATTLE with friends ? </h6>\n              <p>\n                No worries ! Soon you will be able to invite and challenge your\n                friends for the amazing POKE-BATTLES !\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default FriendGame;\n","import React, { Component } from \"react\";\nimport \"../css/Game.css\";\nimport { Button } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nfunction RandomGame(props) {\n  return (\n    <React.Fragment>\n      <Link to=\"/\">\n        <Button size=\"lg\" color=\"success\" className=\"button\">\n          <i className=\"fa fa-home fa-lg\" />\n        </Button>\n      </Link>\n\n      <div className=\"container card-coming-soon\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-6 col-8\">\n            <h4>. . CØMING SØØN . .</h4>\n            <h6>Want to step up your POKE-BATTLES ?</h6>\n            <p>\n              Soon you will be able to challenge yourself by challenging random\n              opponents for amazing POKE-BATTLES !\n            </p>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default RandomGame;\n","import React, { Component } from \"react\";\nimport \"../css/Game.css\";\nimport { Button } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nfunction FriendGame(props) {\n  return (\n    <React.Fragment>\n      <div className=\"container card-coming-soon\">\n        <Link to=\"/\">\n          <Button size=\"lg\" color=\"success\" className=\"button\">\n            <i className=\"fa fa-home fa-lg\" />{\" \"}\n          </Button>\n        </Link>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-8\">\n            <h4 className=\"card-title\">GAME RULES . .</h4>\n            <h6 className=\"card-text\">\n              Excited to know the rules of POKE-BATTLE ?\n            </h6>\n            <p>\n              No worries ! You will soon get the updates, the work is still in\n              progress !!\n            </p>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default FriendGame;\n","import * as ActionTypes from \"./ActionTypes\";\n\nexport const Pokemons = (\n  state = { isLoading: true, errMess: null, pokemons: [] },\n  action\n) => {\n  switch (action.type) {\n    case ActionTypes.POKEMON_DATA_LOADED:\n      return {\n        ...state,\n        isLoading: false,\n        errMess: null,\n        pokemons: state.pokemons,\n      };\n\n    case ActionTypes.POKEMON_LOADING:\n      return { ...state, isLoading: true, errMess: null, pokemons: [] };\n\n    case ActionTypes.POKEMON_LOADING_FAILED:\n      return { ...state, isLoading: false, errMess: action.payload };\n\n    case ActionTypes.POKEMON_ADDED:\n      return {\n        ...state,\n        isLoading: true,\n        pokemons: state.pokemons.concat(action.payload),\n      };\n    default:\n      return state;\n  }\n};\n","import React, { Component } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Main from \"./Components/Main\";\nimport Home from \"./Components/Home\";\nimport FriendGame from \"./Components/FriendGame\";\nimport RandomGame from \"./Components/RandomGame\";\nimport GameRules from \"./Components/GameRules\";\nimport { ConfigureStore } from \"./redux/configureStore\";\nimport { Provider } from \"react-redux\";\n\nconst store = ConfigureStore();\nexport default function Routes() {\n  return (\n    <Provider store={store}>\n      <Switch>\n        <Route path=\"/pokemon\" component={Main} />\n        <Route path=\"/friendgame\" component={FriendGame} />\n        <Route path=\"/randomgame\" component={RandomGame} />\n        <Route path=\"/game_rules\" component={GameRules} />\n        <Route path=\"/pokemon/:id\" render={Main.pokemon} />\n        <Route exact path=\"/\" component={Home} />\n      </Switch>\n    </Provider>\n  );\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport { Pokemons } from \"./pokemon\";\n\nexport const ConfigureStore = () => {\n  const store = createStore(\n    combineReducers({\n      pokemons: Pokemons,\n    }),\n    applyMiddleware(thunk, logger)\n  );\n\n  return store;\n};\n","import React, { Component } from \"react\";\n// import \"./App.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./Route\";\nimport PokemonCache from \"./PokemonCache\";\n\nconst baseUrl = \"/pokemon\";\n\nclass App extends Component {\n  // COMMENT: Remove the line just below this before testing\n  // static pokemonCache = new PokemonCache();\n  render() {\n    // Adding baseName so that the website works with github.io\n    // see here:https://medium.com/@Dragonza/react-router-problem-with-gh-pages-c93a5e243819\n    return (\n      <BrowserRouter basename={baseUrl}>\n        <div className=\"outermost-wrapper\">\n          <div className=\"App\">\n            <Routes />\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n//import 'bootstrap/dist/css/bootstrap.min.css';\n// import 'typeface-lobster';\n// import 'typeface-open-sans';\nimport \"font-awesome/css/font-awesome.css\";\nimport \"bootstrap-social/bootstrap-social.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}